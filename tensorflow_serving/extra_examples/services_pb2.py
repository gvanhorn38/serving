# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: services.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='services.proto',
  package='tensorflow.serving',
  syntax='proto3',
  serialized_pb=_b('\n\x0eservices.proto\x12\x12tensorflow.serving\"/\n\x15\x43lassificationRequest\x12\x16\n\nimage_data\x18\x01 \x03(\x02\x42\x02\x10\x01\"9\n\x16\x43lassificationResponse\x12\x0f\n\x07\x63lasses\x18\x03 \x03(\x05\x12\x0e\n\x06scores\x18\x02 \x03(\x02\x32z\n\x15\x43lassificationService\x12\x61\n\x08\x43lassify\x12).tensorflow.serving.ClassificationRequest\x1a*.tensorflow.serving.ClassificationResponseb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_CLASSIFICATIONREQUEST = _descriptor.Descriptor(
  name='ClassificationRequest',
  full_name='tensorflow.serving.ClassificationRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='image_data', full_name='tensorflow.serving.ClassificationRequest.image_data', index=0,
      number=1, type=2, cpp_type=6, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\020\001'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=38,
  serialized_end=85,
)


_CLASSIFICATIONRESPONSE = _descriptor.Descriptor(
  name='ClassificationResponse',
  full_name='tensorflow.serving.ClassificationResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='classes', full_name='tensorflow.serving.ClassificationResponse.classes', index=0,
      number=3, type=5, cpp_type=1, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='scores', full_name='tensorflow.serving.ClassificationResponse.scores', index=1,
      number=2, type=2, cpp_type=6, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=87,
  serialized_end=144,
)

DESCRIPTOR.message_types_by_name['ClassificationRequest'] = _CLASSIFICATIONREQUEST
DESCRIPTOR.message_types_by_name['ClassificationResponse'] = _CLASSIFICATIONRESPONSE

ClassificationRequest = _reflection.GeneratedProtocolMessageType('ClassificationRequest', (_message.Message,), dict(
  DESCRIPTOR = _CLASSIFICATIONREQUEST,
  __module__ = 'services_pb2'
  # @@protoc_insertion_point(class_scope:tensorflow.serving.ClassificationRequest)
  ))
_sym_db.RegisterMessage(ClassificationRequest)

ClassificationResponse = _reflection.GeneratedProtocolMessageType('ClassificationResponse', (_message.Message,), dict(
  DESCRIPTOR = _CLASSIFICATIONRESPONSE,
  __module__ = 'services_pb2'
  # @@protoc_insertion_point(class_scope:tensorflow.serving.ClassificationResponse)
  ))
_sym_db.RegisterMessage(ClassificationResponse)


_CLASSIFICATIONREQUEST.fields_by_name['image_data'].has_options = True
_CLASSIFICATIONREQUEST.fields_by_name['image_data']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\020\001'))
import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class ClassificationServiceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Classify = channel.unary_unary(
        '/tensorflow.serving.ClassificationService/Classify',
        request_serializer=ClassificationRequest.SerializeToString,
        response_deserializer=ClassificationResponse.FromString,
        )


class ClassificationServiceServicer(object):

  def Classify(self, request, context):
    """Classifies an image into classes.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ClassificationServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Classify': grpc.unary_unary_rpc_method_handler(
          servicer.Classify,
          request_deserializer=ClassificationRequest.FromString,
          response_serializer=ClassificationResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'tensorflow.serving.ClassificationService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaClassificationServiceServicer(object):
  def Classify(self, request, context):
    """Classifies an image into classes.
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaClassificationServiceStub(object):
  def Classify(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """Classifies an image into classes.
    """
    raise NotImplementedError()
  Classify.future = None


def beta_create_ClassificationService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('tensorflow.serving.ClassificationService', 'Classify'): ClassificationRequest.FromString,
  }
  response_serializers = {
    ('tensorflow.serving.ClassificationService', 'Classify'): ClassificationResponse.SerializeToString,
  }
  method_implementations = {
    ('tensorflow.serving.ClassificationService', 'Classify'): face_utilities.unary_unary_inline(servicer.Classify),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_ClassificationService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('tensorflow.serving.ClassificationService', 'Classify'): ClassificationRequest.SerializeToString,
  }
  response_deserializers = {
    ('tensorflow.serving.ClassificationService', 'Classify'): ClassificationResponse.FromString,
  }
  cardinalities = {
    'Classify': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'tensorflow.serving.ClassificationService', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
